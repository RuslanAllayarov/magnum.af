#!/bin/bash +x
# usage: magnum.af.docker <simfile.py> [...]
# e.g. magnum.af.docker sp4.py -v -d 0
# $1 ... input script e.g. sp4.py

#docker_tag="git.exp.univie.ac.at:4567/paul/magnum.af"
docker_tag="git.exp.univie.ac.at:4567/paul/magnum.af/cuda-dev"
magaf_cache_dir="/tmp/magnumaf.cache/"
current_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)""/"

# abort if $1 not set, i.e. no args are given
if [[ $# -eq 0 ]] ; then
    echo 'Please provide a simulation script to be run in docker.'
    echo "e.g.: 'magnum.af.docker sp4.py'"
    echo "Aborting..."
    exit 1
fi

## set outdir to match python parser
function get_outdir(){
    local outdir=""
    local forward_args=("$@") # saving args for later restore (demo)

    #check if python parser's -o is set
    for arg in "$@"
    do
        #echo "arg:"$arg
        case $arg in
            -o|--outdir)
                outdir=$(realpath "$2")"/" # value is at second position '$2'
	    #echo "outdir is '$outdir'"
                shift # past argument
                shift # past value
            ;;
            *)
                shift
            ;;
        esac
    done
    # not necessary here, if not used below in func
    set -- "${forward_args[@]}" # resetting $@ (demo)

    # set outdir to default if no -o is set
    if [ -z "$outdir" ]; then
        local script_basename="$(basename -- "$1")"
        local script_filename="${script_basename##*.}"
        outdir="$current_dir""output_""$script_filename""/"
    fi
    echo "$outdir"
}

# parsing pre-script arguments
d_flag=''
for arg in "$@"
do
    case $arg in
        -d|--detach)
	    d_flag='true'
            shift
        ;;
        *)
            break
        ;;
    esac
done

input_file_path=$(realpath "$1")

outdir=$(get_outdir "$@")

mkdir -p "$outdir" # making sure $outdir exists before mounting. Otherwise non-existent bind mounts get initialized to an empty dir owned by root, leading to permission errors

# assembling docker command
dock="nvidia-docker run \
    --rm \
    --user $UID \
    -v $input_file_path:$input_file_path \
    -v $outdir:$outdir \
    -v $current_dir:$current_dir \
    -v $magaf_cache_dir:$magaf_cache_dir \
"
[ "$d_flag" == "true" ] && dock="$dock --detach"
dock="$dock -t $docker_tag /bin/bash -c \"cd $current_dir && python3 $*\""

# run docker command
eval "$dock"
