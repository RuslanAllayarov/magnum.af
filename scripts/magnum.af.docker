#!/bin/bash +x

print_usage() {
printf "Usage: $(basename "$0") {-d, -h} <script.py> [...]

Run provided <script.py> in a docker container, forwarding all preceeding arguments.

Required positional argument:
    <script.py> [...]   Simulation script to be run in docker, forwarding arguments [...].

Optional arguments (before <script.py>):
    -d|--detach         Run docker in detached mode.
    -h|--help           Show this help.

Examples:
    $(basename "$0") sp4.py
    $(basename "$0") -d sp4.py -o outdir/ -v
"
}

# parsing pre-script arguments
d_flag=''
for arg in "$@"
do
    case $arg in
        -d|--detach)
	    d_flag='true'
            shift
        ;;
        -h|--help)
            print_usage
            exit 0
        ;;
        *)
            break
        ;;
    esac
done

# abort if no args are given or current "$1" not a regular file
if [ $# -eq 0 ] || [ ! -f "$1" ] ; then
    echo 'Please provide a simulation script to be run in docker.'
    print_usage
    echo "Aborting..."
    exit 1
fi

## set outdir to match python parser
function get_outdir(){
    local outdir=""
    local forward_args=("$@") # saving args for later restore (demo)

    #check if python parser's -o is set
    for arg in "$@"
    do
        #echo "arg:"$arg
        case $arg in
            -o|--outdir)
                outdir=$(realpath "$2")"/" # value is at second position '$2'
	    #echo "outdir is '$outdir'"
                shift # past argument
                shift # past value
            ;;
            *)
                shift
            ;;
        esac
    done
    # not necessary here, if not used below in func
    set -- "${forward_args[@]}" # resetting $@ (demo)

    # set outdir to default if no -o is set
    if [ -z "$outdir" ]; then
        local script_basename="$(basename -- "$1")"
        local script_filename="${script_basename%.*}" # without extension
        outdir="$PWD/output_$script_filename/"
    fi
    echo "$outdir"
}

input_file_path=$(realpath "$1")
outdir=$(get_outdir "$@")
docker_tag="git.exp.univie.ac.at:4567/paul/magnum.af"
magaf_cache_dir="/tmp/magnumaf.cache/"

# making sure volumes exist before mounting.
# Otherwise non-existent bind mounts get initialized to an empty dir owned by root, leading to permission errors
mkdir -p "$outdir"
mkdir -p "$magaf_cache_dir"

# assembling docker command
dock="nvidia-docker run \
    --rm \
    --user $UID \
    -v $input_file_path:$input_file_path \
    -v $outdir:$outdir \
    -v $PWD:$PWD \
    -v $magaf_cache_dir:$magaf_cache_dir \
"
[ "$d_flag" == "true" ] && dock="$dock --detach"
dock="$dock -t $docker_tag /bin/bash -c \"cd $PWD && python3 $*\""

# run docker command
eval "$dock"
