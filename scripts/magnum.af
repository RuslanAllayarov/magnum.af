#!/bin/bash
# magnum.af runfile
set -e

magafdir=$( dirname "${BASH_SOURCE[0]}" )/.. # path to magnum.af/
allargs=$@

b_flag='' 
backend='' 
f_flag='' 
GPU='0'
d_flag=''
i_flag=''
inputfile=''
o_flag=''
outputdir=''
postprocess=''
r_flag='' 
s_flag='' 
S_flag='' 
v_flag='false'

print_usage() {
  printf "Usage: $(basename "$0") {b:|h|f|g:|i:|o:|p:|r|s|S|v} [inputfile outputdir]

Simulation script for magnum.af. Manages build process, directory creation and program execution.

Arguments:
      inputfile      Required input script with .cpp or .py extension. Must be provided either as first positional argument \$1 or as argument following the '-i' option.
      outputdir      Required output directory. Should be provided either as second positional argument \$2 or as argument following the '-o' option. If non is given, a 
                     directory called 'output_magnum.af' is created in the current dir. This interferes with correct argument passing to the input script, though.
      \$n             Optional further arguments are passed to the input script. Takes into account whether inputfile/outputdir is given with flags or as positional argument (see examples).

Options (subsequent ':' indicates that an argument is expected):
  -h  help           Show this help message.

  -b: backend        arg={cuda, opencl, cpu} Select backend other than default for .cpp files. To be set inside file for .py.
  -f  force          Forces output to be written in already existing output directory. This may overwrite files.
  -g: GPU            Expects integer number n to specify the GPU to be used. Default is 0.
  -i: inputfile      Inputfile for magnum.af. Either a .cpp file containing main() or a .py file.
  -o: outputdir      Directory to write output to. Expects directory path.
  -p: postprocess    Copies the given file into the output directory and executes it after the inputscript is finished. Extensions .gpi, .plt, .gnu are execued with gnuplot.
  -r  (no)rebuild    Skips build process for .cpp inputfile or executes build for .py inputfile.
  -s  screen         Starts script using the terminal multiplexer screen.
  -S  silent screen  Silently starts script using screen, skipping 'tail -f stdout.txt'.
  -v  verbose        Show more details of this script.

Examples:
  magnum.af sp4.py
  magnum.af sp4.cpp
  magnum.af -fsi sp4.cpp -o run1 -g 1 -p plot_sp4.sh

Example passing arguments 'a b c' to the input script.  The behaviour is equivalent for all versions
and shows how 'inputscript' and 'outputdir' can be either flagged arguments or positional arguments. 
  magnum.af -i sp4.cpp -o run1 a b c
  magnum.af -i sp4.cpp run1 a b c
  magnum.af -o run1 sp4.cpp a b c
  magnum.af sp4.cpp run1 a b c

Note:
  'magnum.af sp4.cpp a b c' would interpret 'a' as outputdir, so please specify outputdir when passing arguments.
"
}


while getopts 'b:Bdhfg:i:o:p:rsSv' flag; do
  case "${flag}" in
    h) print_usage
       exit 0 ;;
    b) b_flag='true'; backend="${OPTARG}" ;;
    B) ;; #Note: passed from magnum.af.docker script to avoid additional parsing
    d) ;; #Note: passed from magnum.af.docker script to avoid additional parsing
    f) f_flag='true' ;;
    g) GPU="${OPTARG}" ;;
    i) i_flag='true'; inputfile="${OPTARG}" ;;
    o) o_flag='true'; outputdir="${OPTARG}" ;;
    p) postprocess="${OPTARG}" ;;
    r) r_flag='true' ;;
    s) s_flag='true' ;;
    S) S_flag='true' ;;
    v) v_flag='true' ;;
    *) print_usage
       exit 1 ;;
  esac
done
shift $((OPTIND-1)) # resetting counting

if [[ "$v_flag" == "true" ]]; then
    set -x
fi

if [ -z "$inputfile" ]; then
    inputfile=$1
fi
# only for backward-compatibility
#if [ -z "$outputdir" ]; then
#    outputdir=$2
#fi

function log () {
    if [[ "$v_flag" == "true" ]]; then
        echo "$@"
    fi
}

log "b_flag           $f_flag      "
log "backend          $backend     "
log "f_flag           $f_flag      "
log "GPU              $GPU         "
log "s_flag           $s_flag      "
log "d_flag           $d_flag      "
log "i_flag           $i_flag      "
log "inputfile        $inputfile   "
log "o_flag           $o_flag      "
log "outputdir        $outputdir   "
log "postprocess      $postprocess "
log "r_flag           $r_flag      "
log "s_flag           $s_flag      "
log "S_flag           $S_flag      "
log "v_flag          $v_flag     "

log "checking input arguments"
log "checking $inputfile != '' and extension"
if [[ "$inputfile" == "" ]]; then
    echo "Error: missing inputfile as first argument required, aborting..."
    exit 1
elif [ ! -e "$inputfile" ]
then
    echo "Error: given inputfile does not exist, aborting..."
    exit 1
else
    filename=$(basename -- "$inputfile")
    extension="${filename##*.}"
    filename="${filename%.*}"
    log "\$extension=$extension"
    log "\$filename=$filename"
    if [[ $extension != "cpp" &&  $extension != "py" ]];then
        echo "Error: wrong extension $extension, expected .cpp or .py"
        exit 1
    fi
fi

log "checking backend option"
if [ "$b_flag" == "true" ]; then
    if [ "$backend" != "cuda" ] && [ "$backend" != "opencl" ] &&  [ "$backend" != "cpu" ] ; then
        echo "Error: Unknown backend '"$backend"'. Expected {cuda, opencl, cpu} as argument following '-b' flag. Aborting..."
        exit 1
    fi
fi

log "checking if build is necessary"
if ([ "$extension" == "cpp" ] && [ "$r_flag" != "true" ]) || ([ "$extension" == "py" ] && ([ ! -e "$magafdir/build/src/magnum_af.so" ] || [ "$r_flag" == "true" ]));then
    log "checking if other main exists in /src"
    $magafdir/scripts/bash/check_main.sh $v_flag
    
    log "building"
    [ "$extension" == "cpp" ] && cp $inputfile $magafdir/src || cp $magafdir/scripts/main_empty.cpp $magafdir/src 
    $magafdir/scripts/bash/build.sh $magafdir $v_flag
    [ "$extension" == "cpp" ] && rm $magafdir/src/$(basename $inputfile) || rm $magafdir/src/main_empty.cpp
    
    log "moving possible old main back"
    $magafdir/scripts/bash/check_main_remove.sh $v_flag
fi

log "checking outputdir $outputdir"
if [ -z "$outputdir" ]; then
    if [ "$i_flag" == "true" ] && [ "$o_flag" != "true" ] && [ "$1" != "" ]; then
        log "setting outputdir to \$1=$1"
        outputdir="$1"
    elif [ "$i_flag" != "true" ] && [ "$o_flag" != "true" ] && [ "$2" != "" ]; then
        log "setting outputdir to \$2=$2"
        outputdir="$2"
    else
        outputdir="$PWD/output_magnum.af"
        log "no output dir given, using '$outputdir' which is in current folder"
    fi
fi
if [ "$f_flag" == "true" ]; then
    if [ ! -e "$outputdir" ];then
        log "writing in new directory $outputdir"
        mkdir --parents $outputdir
    else
        log "writing in existing directory $outputdir"
    fi
else
    $magafdir/scripts/bash/check_write_dir.sh $outputdir $v_flag
fi

log "printing bash command and git log in outputdir"
git_is_aviable=$(command -v git || true)
if [[ -n "$git_is_aviable" ]];then
    log "git aviable"
    dir_is_gitdir="$(git rev-parse --is-inside-work-tree 2> /dev/null  || true)"
    log "dir_is_gitdir =${dir_is_gitdir}"
    if [[ "$dir_is_gitdir" == "true" ]]; then
        githash=$(git rev-parse HEAD)
    else
        log "Note: current directory is no git dir, omitting git log"
    fi
else
    log "git not aviable"
fi

log "writing $outputdir/simulation_info.txt"
if [[ -n "$githash" ]];then 
    echo "Command '$0 $allargs' called at $(eval date). According git hash is $githash" >> $outputdir/command_log.txt
else
    echo "Command '$0 $allargs' called at $(eval date)." >> $outputdir/command_log.txt
fi

log "copying postprocess if existing"
if [[ -n "$postprocess" ]]; then
    cp $postprocess $outputdir
    postpr_filename=$(basename -- "$postprocess")
    postpr_extension="${postpr_filename##*.}"
    postpr_filename="${postpr_filename%.*}"
    log "postpr_extension=$postpr_extension"
    log "postpr_filename=$postpr_filename"
    if [ "$postpr_extension" = "gpi" ] || [ "$postpr_extension" = "plt" ] || [ "$postpr_extension" = "gnu" ] ;then
        gnu="true"
        log "gnu=$gnu"
    fi
fi

log "copying files"
if [[ "$outputdir" != "" ]]; then
    if [[ "$extension" == "cpp" ]];then
        cp $magafdir/bin/magnum.af-* $outputdir
    fi
    cp $inputfile $outputdir
fi

log "checking if inputfile and outputdir are flagged arguments or mass arguments"
skip=0
[ "$i_flag" == "" ] && skip="$((skip + 1))"  && log "$skip iflag is not true"
[ "$o_flag" == "" ] && skip="$((skip + 1))"  && log "$skip oflag is not true"
min=$( (( $# <= $skip )) && echo "$#" || echo "$skip") # minimum of remaining arguments and skip to prevent overshifting
log "shifting $min"
shift $min


log "check if dir ends with / and add if not"
outputdir_slash=$outputdir
if [ "${outputdir_slash:$((${#str}-1)):1}" != "/" ]; then
    log "adding / to outputdir_slash"
    outputdir_slash+=/
fi

log "running magnum.af"
if [ "$extension" == "py" ];then

    log "simple python/python3 switch depending on 'pip3 show' output"
    command -v pip3 >/dev/null 2>&1 && pip3_output="$(pip3 show arrayfire)" # Note: output of 'pip3 show' is empty if package not found
    if [ -n "$pip3_output" ]; then
        pythonversion="python3"
    else
        pythonversion="python"
    fi

    if [ "$s_flag" == "true" ] || [ "$S_flag" == "true" ] ;then
        workaround_for_gto="(PYTHONPATH=$magafdir/build/src LD_LIBRARY_PATH=$LD_LIBRARY_PATH $pythonversion -u $inputfile $outputdir_slash $GPU $@ && if [ -n "\'""$postprocess""\'" ]; then (cd $outputdir && ( [ -n "\'""$gnu""\'" ] && gnuplot $postprocess -persist || (./$postprocess)) ); fi && echo "\'"magnum.af finished, press <ctrl+c> to exit currently running \"tail -f\" command"\'") |& tee $outputdir/stdout.txt"
        screen -d -S GPU$GPU -m bash -c "$workaround_for_gto"
        echo "started magnum.af in screen"
        #[ "$v_flag" == "true" ] && log "Running 'screen -ls':" && screen -ls # NOTE: problem on GTO: after screen -ls, this script stops
        if [ "$s_flag" == "true" ];then
            log "running: tail -f $outputdir/stdout.txt. Press <ctrl+c> to exit."
            sleep_val=0
            while [ ! -f "$outputdir/stdout.txt" ];
            do
                sleep 0.001
                log "waiting for $outputdir/stdout.txt, sleep_val=$sleep_val"
                sleep_val=$((val+1))
            done
            tail -f -n 0 $outputdir/stdout.txt
        fi
    else
        eval "PYTHONPATH=$magafdir/build/src $pythonversion -u $inputfile $outputdir_slash $GPU $@ |& tee $outputdir/stdout.txt"
        if [ -n "$postprocess" ]; then (cd $outputdir && [ -n "$gnu" ] && gnuplot $postprocess -persist || ./$postprocess); fi
    fi
else
    log "Using cpp version"
    if [ -e $outputdir/magnum.af-cuda ];then
        runfile="$outputdir/magnum.af-cuda"
    elif [ -e $outputdir/magnum.af-opencl ];then
        runfile=$outputdir/magnum.af-opencl
    else
        runfile=$outputdir/magnum.af-cpu
    fi
    log "checking b flag and check default overwriting"
    if [ "$b_flag" == "true" ]; then
        if [ "$backend" = "cuda" ]; then
            if [ ! -f $outputdir/magnum.af-cuda ]; then
                echo "Error. Requested backend 'cuda' was not compiled. Please verify that CUDA is installed and found by CMake or select an other backend. Aborting..."
                exit 1
            else
                runfile=$outputdir/magnum.af-cuda
            fi
        elif [ "$backend" = "opencl" ]; then
            if [ ! -f $outputdir/magnum.af-opencl ]; then
                echo "Error. Requested backend 'opencl' was not compiled. Please verify that OpenCL is installed and found by CMake or select an other backend. Aborting..."
                exit 1
            else
                runfile=$outputdir/magnum.af-opencl
            fi
        else
            if [ ! -f $outputdir/magnum.af-cpu ]; then
                echo "Error. Strange! Requested backend 'cpu' was not compiled. This should not have happened. Aborting..."
                exit 1
            else
                runfile=$outputdir/magnum.af-cpu
            fi
        fi
    fi

    if [ "$s_flag" == "true" ] || [ "$S_flag" == "true" ] ;then
        screen -d -S GPU$GPU -m bash -c "($runfile $outputdir_slash $GPU $@ && if [ -n '$postprocess' ]; then (cd $outputdir && ( [ -n '$gnu' ] && gnuplot $postprocess -persist || (./$postprocess)) ); fi && echo 'magnum.af finished, press <ctrl+c> to exit currently running \"tail -f\" command' ) |& tee $outputdir/stdout.txt"
        echo "started $(basename $runfile) in screen"
        #[ "$v_flag" == "true" ] && log "running 'screen -ls':" && screen -ls #TODO#problem on GTO: after screen -ls, this script stops
        if [ "$s_flag" == "true" ];then
            log "running: tail -f $outputdir/stdout.txt. Press <ctrl+c> to exit."
            sleep_val=0
            while [ ! -f "$outputdir/stdout.txt" ];
            do
                sleep 0.001
                log "waiting for $outputdir/stdout.txt, sleep_val=$sleep_val"
                sleep_val=$((val+1))
            done
            tail -f -n 0 $outputdir/stdout.txt
        fi
    else
        echo "starting $(basename $runfile)"
        eval "$runfile $outputdir_slash $GPU $@ |& tee $outputdir/stdout.txt"
        if [ -n "$postprocess" ]; then (cd $outputdir && [ -n "$gnu" ] && gnuplot $postprocess -persist || ./$postprocess); fi
    fi
fi
