#!/bin/bash
# magnum.af runfile
set -e

magafdir=$( dirname "${BASH_SOURCE[0]}" )/.. # path to magnum.af/
f_flag='' 
GPU='0'
i_flag=''
inputfile=''
o_flag=''
outputdir=''
plotfile=''
s_flag='' 
verbose='false'

print_usage() {
  printf "Usage: $(basename "$0") {h|f|g:|i:|o:|p:|r|s|v} [inputfile outputdir]

Simulation script for magnum.af. Manages build process, directory creation and program execution.

Arguments:
  inputfile      Required input script with .cpp or .py extension. Must be provided either as first positional argument \$1 or as argument following the '-i' option.
  outputdir      Required output directory. Should be provided either as second positional argument \$2 or as argument following the '-o' option. 
                 If non is given, a directory called 'output_magnum.af' is created in the current dir. This interferes with correct argument passing to the input script, though.
  \$n             Optional further arguments are passed to the input script. Takes into account whether inputfile/outputdir is given with flags or as positional argument (see examples).

Options (subsequent ':' indicates that an argument is expected):
  -h  help       Show this help message.

  -f  force      Forces output to be written in already existing output directory. This may overwrite files.
  -g: GPU        Expects integer number n to specify the GPU to be used. Default is 0.
  -i: inputfile  Inputfile for magnum.af. Either a .cpp file containing main() or a .py file.
  -o: outputdir  Directory to write output to. Expects directory path.
  -p: plot       Expects argument as plotting script and executes it in the output directory.
  -r  rebuild    Executes build process even though inputfile is .py.
  -s  screen     Starts script using the terminal multiplexer screen.
  -v  verbose    Show more details during execution.

Examples:
  magnum.af sp4.py
  magnum.af sp4.cpp
  magnum.af -fsi sp4.cpp -o run1 -g 1 -p plot_sp4.sh

Example passing arguments 'a b c' to the input script.  The behaviour is equivalent for all versions
and shows how 'inputscript' and 'outputdir' can be either flagged arguments or positional arguments. 
  magnum.af -i sp4.cpp -o run1 a b c
  magnum.af -i sp4.cpp run1 a b c
  magnum.af -o run1 sp4.cpp a b c
  magnum.af sp4.cpp run1 a b c

Note:
 'magnum.af sp4.cpp a b c' would interpret 'a' as outputdir, so please specify outputdir when passing arguments.
"
}


while getopts 'hfg:i:o:p:rsv' flag; do
  case "${flag}" in
    h) print_usage
       exit 0 ;;
    f) f_flag='true' ;;
    g) GPU="${OPTARG}" ;;
    i) i_flag='true'; inputfile="${OPTARG}" ;;
    o) o_flag='true'; outputdir="${OPTARG}" ;;
    p) plotfile="${OPTARG}" ;;
    r) r_flag='true' ;;
    s) s_flag='true' ;;
    v) verbose='true' ;;
    *) print_usage
       exit 1 ;;
  esac
done
shift $((OPTIND-1)) # resetting counting

if [ -z "$inputfile" ]; then
    inputfile=$1
fi
# only for backward-compatibility
#if [ -z "$outputdir" ]; then
#    outputdir=$2
#fi

function log () {
    if [[ "$verbose" == "true" ]]; then
        echo "$@"
    fi
}

log "$f_flag"
log "$GPU"
log "$inputfile"
log "$outputdir"
log "$plotfile"
log "$s_flag"
log "$verbose"

log "checking $inputfile != '' and extension"
if [[ "$inputfile" == "" ]]; then
    echo "Error: missing inputfile as first argument required, aborting..."
    exit 1
elif [ ! -e "$inputfile" ]
then
    echo "Error: given inputfile does not exist, aborting..."
    exit 1
else
    filename=$(basename -- "$inputfile")
    extension="${filename##*.}"
    filename="${filename%.*}"
    log "extension=$extension"
    log "filename=$filename"
    if [[ $extension != "cpp" &&  $extension != "py" ]];then
        echo "Error: wrong extension $extension, expected .cpp or .py"
        exit 1
    fi
fi

log "checking if build is necessary"
if [ "$extension" == "cpp" ] || [ ! -e "$magafdir/build/src/magnum_af.so" ] || [ "$r_flag" == "true" ];then
    log "checking if other main exists in /src"
    $magafdir/scripts/bash/check_main.sh $verbose
    
    log "building"
    [ "$extension" == "cpp" ] && cp $inputfile $magafdir/src || cp $magafdir/scripts/main_empty.cpp $magafdir/src 
    $magafdir/scripts/bash/build.sh $magafdir $verbose
    [ "$extension" == "cpp" ] && rm $magafdir/src/$(basename $inputfile) || rm $magafdir/src/main_empty.cpp
    
    log "moving possible old main back"
    $magafdir/scripts/bash/check_main_remove.sh $verbose
fi

log "checking outputdir $outputdir"
if [ -z "$outputdir" ]; then
    if [ "$i_flag" == "true" ] && [ "$o_flag" != "true" ] && [ "$1" != "" ]; then
        log "setting outputdir to \$1=$1"
        outputdir="$1"
    elif [ "$i_flag" != "true" ] && [ "$o_flag" != "true" ] && [ "$2" != "" ]; then
        log "setting outputdir to \$2=$2"
        outputdir="$2"
    else
        outputdir="$PWD/output_magnum.af"
        log "no output dir given, using '$outputdir' which is in current folder"
    fi
fi
if [ "$f_flag" == "true" ]; then
    if [ ! -e "$outputdir" ];then
        log "writing in new directory $outputdir"
        mkdir --parents $outputdir
    else
        log "writing in existing directory $outputdir"
    fi
else
    $magafdir/scripts/bash/check_write_dir.sh $outputdir $verbose
fi

log "Printing bash command and git log in outputdir"
echo "#Command called with:" >> $outputdir/simulation_info.txt
echo "$0 $@" >> $outputdir/simulation_info.txt

if (( $(git rev-parse --is-inside-work-tree) == "true" )); then
    echo "current git commit hash:" >> $outputdir/simulation_info.txt
    echo $(git rev-parse HEAD) >> $outputdir/simulation_info.txt
else
    echo "Note: current directory is no git dir, omitting git log"
fi

log "copying plotfile if existing"
if [[ -n "$plotfile" ]]; then
    cp $plotfile $outputdir
fi

log "copying files"
if [[ "$outputdir" != "" ]]; then
    cp $magafdir/bin/magnum.af-* $outputdir
    cp $inputfile $outputdir
fi

log "checking if inputfile and outputdir are flagged arguments or mass arguments"
skip=0
[ "$i_flag" == "" ] && skip="$((skip + 1))"  && log "$skip iflag is not true"
[ "$o_flag" == "" ] && skip="$((skip + 1))"  && log "$skip oflag is not true"
min=$( (( $# <= $skip )) && echo "$#" || echo "$skip") # minimum of remaining arguments and skip to prevent overshifting
log "shifting $min"
shift $min


log "check if dir ends with / and add if not"
outputdir_slash=$outputdir
if [ "${outputdir_slash:$((${#str}-1)):1}" != "/" ]; then
    log "adding / to outputdir_slash"
    outputdir_slash+=/
fi

log "running magnum.af"
if [ "$extension" == "py" ];then
    PYTHONPATH=$magafdir/build/src python3 $inputfile $outputdir $GPU $@
else
    if [ -e $outputdir/magnum.af-cuda ];then
        if [ "$s_flag" == "true" ];then
            echo "starting magnum.af-cuda in screen."
            echo "To follow cout.dat run:"
            echo "tail -f $outputdir/cout.txt"
            screen -d -S GPU$GPU -m bash -c "export LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64:$LD_LIBRARY_PATH && export PATH=/usr/local/cuda-9.0/bin:$PATH && $outputdir/magnum.af-cuda $outputdir_slash $GPU $@ > $outputdir/cout.txt 2>&1"
            screen -ls
        else
            echo "starting magnum.af-cuda without screen."
            export LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64:$LD_LIBRARY_PATH && export PATH=/usr/local/cuda-9.0/bin:$PATH && $outputdir/magnum.af-cuda $outputdir_slash $GPU $@
            (cd $outputdir && if [ -n "$plotfile" ]; then ./$plotfile; fi)
        fi
    elif [ -e $outputdir/magnum.af-opencl ];then
        if [ "$s_flag" == "true" ];then
            echo "starting magnum.af-opencl in screen."
            echo "To follow cout.dat run:"
            echo "tail -f $outputdir/cout.txt"
            screen -d -S GPU$GPU -m bash -c "$outputdir/magnum.af-opencl $outputdir_slash $GPU $@ > $outputdir/cout.txt 2>&1"
            screen -ls
        else
            echo "starting magnum.af-opencl without screen."
            $outputdir/magnum.af-opencl $outputdir_slash $GPU $@
            (cd $outputdir && if [ -n "$plotfile" ]; then ./$plotfile; fi)
        fi
    else
        if [ "$s_flag" == "true" ];then
            echo "starting magnum.af-cpu in screen."
            echo "To follow cout.dat run:"
            echo "tail -f $outputdir/cout.txt"
            screen -d -S GPU$GPU -m bash -c "$outputdir/magnum.af-cpu $outputdir_slash $GPU $@ > $outputdir/cout.txt 2>&1"
            screen -ls
        else
            echo "starting magnum.af-cpu."
            $outputdir/magnum.af-cpu $outputdir_slash $GPU $@
            (cd $outputdir && if [ -n "$plotfile" ]; then ./$plotfile; fi)
        fi
    fi
fi
